language: minimal

services: docker

env:
  global:
    - DOCKER_COMPOSE_VERSION=1.23.2
    - KUBECTL_VERSION=1.13.7
    - AWS_IAM_AUTHENTICATOR_VERSION=1.13.7
    - SHA=$(git rev-parse HEAD)
  
addons:
  apt:
    packages:
      - python3-pip

before_install:
  - docker -v && docker-compose -v
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  
  - curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/${KUBECTL_VERSION}/2019-06-11/bin/linux/amd64/kubectl
  - curl -o kubectl.sha256 https://amazon-eks.s3-us-west-2.amazonaws.com/${KUBECTL_VERSION}/2019-06-11/bin/linux/amd64/kubectl.sha256
  - openssl sha1 -sha256 kubectl
  - chmod +x ./kubectl
  - sudo mv ./kubectl /usr/local/bin/kubectl
  - kubectl version --short --client
  
  - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/${AWS_IAM_AUTHENTICATOR_VERSION}/2019-06-11/bin/linux/amd64/aws-iam-authenticator
  - curl -o aws-iam-authenticator.sha256 https://amazon-eks.s3-us-west-2.amazonaws.com/${AWS_IAM_AUTHENTICATOR_VERSION}/2019-06-11/bin/linux/amd64/aws-iam-authenticator.sha256
  - openssl sha1 -sha256 aws-iam-authenticator
  - chmod +x ./aws-iam-authenticator
  - sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
  - aws-iam-authenticator help
  
  - pip3 install --user virtualenv
  - virtualenv ~/cli-ve
  - source ~/cli-ve/bin/activate
  - pip3 install --upgrade awscli
  - aws --version
  
install:
  - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name travis-kubectl --duration-seconds 900)
  - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
  - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
  - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
  - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
  - aws eks update-kubeconfig --region $EKS_CLUSTER_REGION --name $EKS_CLUSTER_NAME

script:
  - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
  - docker-compose -f udacity-c3-deployment/docker/docker-compose-build.yaml build --parallel
  - docker-compose -f udacity-c3-deployment/docker/docker-compose-build.yaml push

deploy:
  - provider: script
    script: bash scripts/deploy.sh production
    on:
      branch: master

  
